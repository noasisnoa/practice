# -*- coding: utf-8 -*-
"""가우스 소거법.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OIxrBKRJqDWPaX-i_t_yDTHlkyyzJx38
"""

import numpy as np

A = np.array([[0.0, 1.0, -3.0], [2.0, 3.0, -1.0], [4.0, 5.0, -2.0]])
B = np.array([[-5.0], [7.0], [10.0]])

import copy
def change(inp_list, inp1, inp2):
    tmp = copy.deepcopy(inp_list[inp1])
    inp_list[inp1] = inp_list[inp2]
    inp_list[inp2] = tmp
    result =  inp_list
    return inp_list

def check_matrix(a, b):
  print(a)
  print('==========')
  print(b)

rows_with_nonzero = 2
a = change(A, 0, rows_with_nonzero)
b = change(B, 0, rows_with_nonzero)
check_matrix(a, b)

#0이 아닌 숫자를 찾는다. 
def find_rows_with_nomazero(A2, r, row_index):
  r = 0
  for c in range(len(row_index)):
    if (A2[c][r] != 0.0):
      rows_with_nonzero =c
      pivot_number = A[c][r]
      break
    return rows_with_nonzero

row_index = list(range(len(A)))
print(row_index)
print(len(row_index))

col_index = len(A[0])
print(A[0])
print(col_index)

pivot_row = np.zeros(col_index, dtype=int)
print(pivot_row)

pivot_mat = []

pivot_row[0] = find_rows_with_nomazero(A, 0, row_index)
print(pivot_row[0])
pivot = A[pivot_row[0]][0]
print(pivot)